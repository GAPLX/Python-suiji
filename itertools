# combinations 排列组合
'''
combinations(iterable,r)
iterable 组合目标对象
r 排列组合的长度
返回一个迭代器，遍历读取
'''
from itertools import combinations as C
text = [1,2,3,4]
# n=2，m=4 长度为2的所有组合情况
a = C(text,2)
combinations = [i for i in a]
combinations
>>>[(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]
# n=[1,4], m=4 用combination实现全组合
combinations = [text[start:end] for start,end in C(range(len(text)+1),2)]
combinations
>>>[[1],
 [1, 2],
 [1, 2, 3],
 [1, 2, 3, 4],
 [2],
 [2, 3],
 [2, 3, 4],
 [3],
 [3, 4],
 [4]]
 
 
 
 #用permutations和product实现全排列
 '''
 permutation:对该参数本身进行，全排列
 product：对不同的参数间进行，全排列
 '''
 #permutations
    from itertools import *
    for j in permutations([2,5,6]):
        print(j)
    >>>
    (2, 5, 6)
    (2, 6, 5)
    (5, 2, 6)
    (5, 6, 2)
    (6, 2, 5)
    (6, 5, 2)
#product
    list1 = [1, 2, 3]
    list2 = [4, 5, 6]
    list3 = [7, 8, 9]
    for i in product(list1,list2,list3):
        print(i)
   >>>
    (1, 4, 7)
    (1, 4, 8)
    (1, 4, 9)
    (1, 5, 7)
    (1, 5, 8)
    (1, 5, 9)
    (1, 6, 7)
    (1, 6, 8)
    (1, 6, 9)
    (2, 4, 7)
    (2, 4, 8)
    (2, 4, 9)
    (2, 5, 7)
    (2, 5, 8)
    (2, 5, 9)
    (2, 6, 7)
    (2, 6, 8)
    (2, 6, 9)
    (3, 4, 7)
    (3, 4, 8)
    (3, 4, 9)
    (3, 5, 7)
    (3, 5, 8)
    (3, 5, 9)
    (3, 6, 7)
    (3, 6, 8)
    (3, 6, 9)
    #[list2]*3表示[list2,list2,list2]
    #最前面的*号表示将[list2,list2,list2]列表解析成独立的参数
    #也就是相当于入参是(list2,list2,list2)
    for i in product(*[list2]*3):
    >>> for i in product([list2],[list2],[list2]):

