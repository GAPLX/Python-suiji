在python中not是逻辑判断词，用于布尔型True和False，not True为False，not False为True，以下是几个常用的not的用法：

(1) not与逻辑判断句if连用，代表not后面的表达式为False的时候，执行冒号后面的语句。比如：

a = False

if not a:  (这里因为a是False，所以not a就是True)

   print "hello"

这里就能够输出结果hello

(2) 判断元素是否在列表或者字典中，if a not in b，a是元素，b是列表或字典，这句话的意思是如果a不在列表b中，那么就执行冒号后面的语句，比如：

a = 5

b = [1, 2, 3]

if a not in b:

   print "hello"

这里也能够输出结果hello

(3) not x 意思相当于 if x is false, then True, else False

代码中经常会有变量是否为None的判断，有三种主要的写法：

 第一种是`if x is None`；

第二种是 `if not x：`；

第三种是`if not x is None`（这句这样理解更清晰`if not (x is None)`） 。

如果你觉得这样写没啥区别，那么你可就要小心了，这里面有一个坑。先来看一下代码：

[python] view plaincopy
 
>>> x = 1  
>>> not x  
False  
>>> x = [1]  
>>> not x  
False  
>>> x = 0  
>>> not x  
True  
>>> x = [0]         # You don't want to fall in this one.  
>>> not x  
False  
在python中 None,  False, 空字符串"", 0, 空列表[], 空字典{}, 空元组()都相当于False ，即：
[python] view plaincopy
 
not None == not False == not '' == not 0 == not [] == not {} == not ()  

因此在使用列表的时候，如果你想区分x==[]和x==None两种情况的话, 此时`if not x:`将会出现问题：

[python] view plaincopy
 
>>> x = []  
>>> y = None  
>>>   
>>> x is None  
False  
>>> y is None  
True  
>>>   
>>>   
>>> not x  
True  
>>> not y  
True  
>>>   
>>>   
>>> not x is None  
>>> True  
>>> not y is None  
False  
>>>   
也许你是想判断x是否为None，但是却把`x==[]`的情况也判断进来了，此种情况下将无法区分。
对于习惯于使用if not x这种写法的pythoner，必须清楚x等于None,  False, 空字符串"", 0, 空列表[], 空字典{}, 空元组()时对你的判断没有影响才行。 
而对于`if x is not None`和`if not x is None`写法，很明显前者更清晰，而后者有可能使读者误解为`if (not x) is None`，因此推荐前者，同时这也是谷歌推荐的风格


结论：
`if x is not None`是最好的写法，清晰，不会出现错误，以后坚持使用这种写法。
使用if not x这种写法的前提是：必须清楚x等于None,  False, 空字符串"", 0, 空列表[], 空字典{}, 空元组()时对你的判断没有影响才行。
